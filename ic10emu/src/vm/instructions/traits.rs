// =================================================
//   !! <----->      DO NOT MODIFY      <-----> !!
//
//   This module was automatically generated by an
//   xtask
//
//   run `cargo xtask generate` from the workspace
//   to regenerate
//
// =================================================

use crate::vm::object::traits::IntegratedCircuit;
pub trait AbsInstruction: IntegratedCircuit {
    /// abs r? a(r?|num)
    fn execute_abs(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait AcosInstruction: IntegratedCircuit {
    /// acos r? a(r?|num)
    fn execute_acos(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait AddInstruction: IntegratedCircuit {
    /// add r? a(r?|num) b(r?|num)
    fn execute_add(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait AliasInstruction: IntegratedCircuit {
    /// alias str r?|d?
    fn execute_alias(
        &mut self,
        vm: &crate::vm::VM,
        string: &crate::vm::instructions::operands::Operand,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait AndInstruction: IntegratedCircuit {
    /// and r? a(r?|num) b(r?|num)
    fn execute_and(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait AsinInstruction: IntegratedCircuit {
    /// asin r? a(r?|num)
    fn execute_asin(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait AtanInstruction: IntegratedCircuit {
    /// atan r? a(r?|num)
    fn execute_atan(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait Atan2Instruction: IntegratedCircuit {
    /// atan2 r? a(r?|num) b(r?|num)
    fn execute_atan2(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BapInstruction: IntegratedCircuit {
    /// bap a(r?|num) b(r?|num) c(r?|num) d(r?|num)
    fn execute_bap(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BapalInstruction: IntegratedCircuit {
    /// bapal a(r?|num) b(r?|num) c(r?|num) d(r?|num)
    fn execute_bapal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BapzInstruction: IntegratedCircuit {
    /// bapz a(r?|num) b(r?|num) c(r?|num)
    fn execute_bapz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BapzalInstruction: IntegratedCircuit {
    /// bapzal a(r?|num) b(r?|num) c(r?|num)
    fn execute_bapzal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BdnsInstruction: IntegratedCircuit {
    /// bdns d? a(r?|num)
    fn execute_bdns(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BdnsalInstruction: IntegratedCircuit {
    /// bdnsal d? a(r?|num)
    fn execute_bdnsal(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BdseInstruction: IntegratedCircuit {
    /// bdse d? a(r?|num)
    fn execute_bdse(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BdsealInstruction: IntegratedCircuit {
    /// bdseal d? a(r?|num)
    fn execute_bdseal(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BeqInstruction: IntegratedCircuit {
    /// beq a(r?|num) b(r?|num) c(r?|num)
    fn execute_beq(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BeqalInstruction: IntegratedCircuit {
    /// beqal a(r?|num) b(r?|num) c(r?|num)
    fn execute_beqal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BeqzInstruction: IntegratedCircuit {
    /// beqz a(r?|num) b(r?|num)
    fn execute_beqz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BeqzalInstruction: IntegratedCircuit {
    /// beqzal a(r?|num) b(r?|num)
    fn execute_beqzal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BgeInstruction: IntegratedCircuit {
    /// bge a(r?|num) b(r?|num) c(r?|num)
    fn execute_bge(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BgealInstruction: IntegratedCircuit {
    /// bgeal a(r?|num) b(r?|num) c(r?|num)
    fn execute_bgeal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BgezInstruction: IntegratedCircuit {
    /// bgez a(r?|num) b(r?|num)
    fn execute_bgez(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BgezalInstruction: IntegratedCircuit {
    /// bgezal a(r?|num) b(r?|num)
    fn execute_bgezal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BgtInstruction: IntegratedCircuit {
    /// bgt a(r?|num) b(r?|num) c(r?|num)
    fn execute_bgt(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BgtalInstruction: IntegratedCircuit {
    /// bgtal a(r?|num) b(r?|num) c(r?|num)
    fn execute_bgtal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BgtzInstruction: IntegratedCircuit {
    /// bgtz a(r?|num) b(r?|num)
    fn execute_bgtz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BgtzalInstruction: IntegratedCircuit {
    /// bgtzal a(r?|num) b(r?|num)
    fn execute_bgtzal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BleInstruction: IntegratedCircuit {
    /// ble a(r?|num) b(r?|num) c(r?|num)
    fn execute_ble(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BlealInstruction: IntegratedCircuit {
    /// bleal a(r?|num) b(r?|num) c(r?|num)
    fn execute_bleal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BlezInstruction: IntegratedCircuit {
    /// blez a(r?|num) b(r?|num)
    fn execute_blez(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BlezalInstruction: IntegratedCircuit {
    /// blezal a(r?|num) b(r?|num)
    fn execute_blezal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BltInstruction: IntegratedCircuit {
    /// blt a(r?|num) b(r?|num) c(r?|num)
    fn execute_blt(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BltalInstruction: IntegratedCircuit {
    /// bltal a(r?|num) b(r?|num) c(r?|num)
    fn execute_bltal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BltzInstruction: IntegratedCircuit {
    /// bltz a(r?|num) b(r?|num)
    fn execute_bltz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BltzalInstruction: IntegratedCircuit {
    /// bltzal a(r?|num) b(r?|num)
    fn execute_bltzal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BnaInstruction: IntegratedCircuit {
    /// bna a(r?|num) b(r?|num) c(r?|num) d(r?|num)
    fn execute_bna(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BnaalInstruction: IntegratedCircuit {
    /// bnaal a(r?|num) b(r?|num) c(r?|num) d(r?|num)
    fn execute_bnaal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BnanInstruction: IntegratedCircuit {
    /// bnan a(r?|num) b(r?|num)
    fn execute_bnan(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BnazInstruction: IntegratedCircuit {
    /// bnaz a(r?|num) b(r?|num) c(r?|num)
    fn execute_bnaz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BnazalInstruction: IntegratedCircuit {
    /// bnazal a(r?|num) b(r?|num) c(r?|num)
    fn execute_bnazal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BneInstruction: IntegratedCircuit {
    /// bne a(r?|num) b(r?|num) c(r?|num)
    fn execute_bne(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BnealInstruction: IntegratedCircuit {
    /// bneal a(r?|num) b(r?|num) c(r?|num)
    fn execute_bneal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BnezInstruction: IntegratedCircuit {
    /// bnez a(r?|num) b(r?|num)
    fn execute_bnez(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BnezalInstruction: IntegratedCircuit {
    /// bnezal a(r?|num) b(r?|num)
    fn execute_bnezal(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrapInstruction: IntegratedCircuit {
    /// brap a(r?|num) b(r?|num) c(r?|num) d(r?|num)
    fn execute_brap(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrapzInstruction: IntegratedCircuit {
    /// brapz a(r?|num) b(r?|num) c(r?|num)
    fn execute_brapz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrdnsInstruction: IntegratedCircuit {
    /// brdns d? a(r?|num)
    fn execute_brdns(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrdseInstruction: IntegratedCircuit {
    /// brdse d? a(r?|num)
    fn execute_brdse(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BreqInstruction: IntegratedCircuit {
    /// breq a(r?|num) b(r?|num) c(r?|num)
    fn execute_breq(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BreqzInstruction: IntegratedCircuit {
    /// breqz a(r?|num) b(r?|num)
    fn execute_breqz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrgeInstruction: IntegratedCircuit {
    /// brge a(r?|num) b(r?|num) c(r?|num)
    fn execute_brge(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrgezInstruction: IntegratedCircuit {
    /// brgez a(r?|num) b(r?|num)
    fn execute_brgez(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrgtInstruction: IntegratedCircuit {
    /// brgt a(r?|num) b(r?|num) c(r?|num)
    fn execute_brgt(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrgtzInstruction: IntegratedCircuit {
    /// brgtz a(r?|num) b(r?|num)
    fn execute_brgtz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrleInstruction: IntegratedCircuit {
    /// brle a(r?|num) b(r?|num) c(r?|num)
    fn execute_brle(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrlezInstruction: IntegratedCircuit {
    /// brlez a(r?|num) b(r?|num)
    fn execute_brlez(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrltInstruction: IntegratedCircuit {
    /// brlt a(r?|num) b(r?|num) c(r?|num)
    fn execute_brlt(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrltzInstruction: IntegratedCircuit {
    /// brltz a(r?|num) b(r?|num)
    fn execute_brltz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrnaInstruction: IntegratedCircuit {
    /// brna a(r?|num) b(r?|num) c(r?|num) d(r?|num)
    fn execute_brna(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrnanInstruction: IntegratedCircuit {
    /// brnan a(r?|num) b(r?|num)
    fn execute_brnan(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrnazInstruction: IntegratedCircuit {
    /// brnaz a(r?|num) b(r?|num) c(r?|num)
    fn execute_brnaz(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrneInstruction: IntegratedCircuit {
    /// brne a(r?|num) b(r?|num) c(r?|num)
    fn execute_brne(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait BrnezInstruction: IntegratedCircuit {
    /// brnez a(r?|num) b(r?|num)
    fn execute_brnez(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait CeilInstruction: IntegratedCircuit {
    /// ceil r? a(r?|num)
    fn execute_ceil(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait ClrInstruction: IntegratedCircuit {
    /// clr d?
    fn execute_clr(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait ClrdInstruction: IntegratedCircuit {
    /// clrd id(r?|num)
    fn execute_clrd(
        &mut self,
        vm: &crate::vm::VM,
        id: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait CosInstruction: IntegratedCircuit {
    /// cos r? a(r?|num)
    fn execute_cos(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait DefineInstruction: IntegratedCircuit {
    /// define str num
    fn execute_define(
        &mut self,
        vm: &crate::vm::VM,
        string: &crate::vm::instructions::operands::Operand,
        num: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait DivInstruction: IntegratedCircuit {
    /// div r? a(r?|num) b(r?|num)
    fn execute_div(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait ExpInstruction: IntegratedCircuit {
    /// exp r? a(r?|num)
    fn execute_exp(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait FloorInstruction: IntegratedCircuit {
    /// floor r? a(r?|num)
    fn execute_floor(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait GetInstruction: IntegratedCircuit {
    /// get r? d? address(r?|num)
    fn execute_get(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
        address: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait GetdInstruction: IntegratedCircuit {
    /// getd r? id(r?|num) address(r?|num)
    fn execute_getd(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        id: &crate::vm::instructions::operands::Operand,
        address: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait HcfInstruction: IntegratedCircuit {
    /// hcf
    fn execute_hcf(&mut self, vm: &crate::vm::VM) -> Result<(), crate::errors::ICError>;
}
pub trait JInstruction: IntegratedCircuit {
    /// j int
    fn execute_j(
        &mut self,
        vm: &crate::vm::VM,
        int: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait JalInstruction: IntegratedCircuit {
    /// jal int
    fn execute_jal(
        &mut self,
        vm: &crate::vm::VM,
        int: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait JrInstruction: IntegratedCircuit {
    /// jr int
    fn execute_jr(
        &mut self,
        vm: &crate::vm::VM,
        int: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LInstruction: IntegratedCircuit {
    /// l r? d? logicType
    fn execute_l(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
        logic_type: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LabelInstruction: IntegratedCircuit {
    /// label d? str
    fn execute_label(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        string: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LbInstruction: IntegratedCircuit {
    /// lb r? deviceHash logicType batchMode
    fn execute_lb(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        device_hash: &crate::vm::instructions::operands::Operand,
        logic_type: &crate::vm::instructions::operands::Operand,
        batch_mode: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LbnInstruction: IntegratedCircuit {
    /// lbn r? deviceHash nameHash logicType batchMode
    fn execute_lbn(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        device_hash: &crate::vm::instructions::operands::Operand,
        name_hash: &crate::vm::instructions::operands::Operand,
        logic_type: &crate::vm::instructions::operands::Operand,
        batch_mode: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LbnsInstruction: IntegratedCircuit {
    /// lbns r? deviceHash nameHash slotIndex logicSlotType batchMode
    fn execute_lbns(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        device_hash: &crate::vm::instructions::operands::Operand,
        name_hash: &crate::vm::instructions::operands::Operand,
        slot_index: &crate::vm::instructions::operands::Operand,
        logic_slot_type: &crate::vm::instructions::operands::Operand,
        batch_mode: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LbsInstruction: IntegratedCircuit {
    /// lbs r? deviceHash slotIndex logicSlotType batchMode
    fn execute_lbs(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        device_hash: &crate::vm::instructions::operands::Operand,
        slot_index: &crate::vm::instructions::operands::Operand,
        logic_slot_type: &crate::vm::instructions::operands::Operand,
        batch_mode: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LdInstruction: IntegratedCircuit {
    /// ld r? id(r?|num) logicType
    fn execute_ld(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        id: &crate::vm::instructions::operands::Operand,
        logic_type: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LogInstruction: IntegratedCircuit {
    /// log r? a(r?|num)
    fn execute_log(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LrInstruction: IntegratedCircuit {
    /// lr r? d? reagentMode int
    fn execute_lr(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
        reagent_mode: &crate::vm::instructions::operands::Operand,
        int: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait LsInstruction: IntegratedCircuit {
    /// ls r? d? slotIndex logicSlotType
    fn execute_ls(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
        slot_index: &crate::vm::instructions::operands::Operand,
        logic_slot_type: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait MaxInstruction: IntegratedCircuit {
    /// max r? a(r?|num) b(r?|num)
    fn execute_max(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait MinInstruction: IntegratedCircuit {
    /// min r? a(r?|num) b(r?|num)
    fn execute_min(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait ModInstruction: IntegratedCircuit {
    /// mod r? a(r?|num) b(r?|num)
    fn execute_mod(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait MoveInstruction: IntegratedCircuit {
    /// move r? a(r?|num)
    fn execute_move(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait MulInstruction: IntegratedCircuit {
    /// mul r? a(r?|num) b(r?|num)
    fn execute_mul(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait NorInstruction: IntegratedCircuit {
    /// nor r? a(r?|num) b(r?|num)
    fn execute_nor(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait NotInstruction: IntegratedCircuit {
    /// not r? a(r?|num)
    fn execute_not(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait OrInstruction: IntegratedCircuit {
    /// or r? a(r?|num) b(r?|num)
    fn execute_or(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait PeekInstruction: IntegratedCircuit {
    /// peek r?
    fn execute_peek(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait PokeInstruction: IntegratedCircuit {
    /// poke address(r?|num) value(r?|num)
    fn execute_poke(
        &mut self,
        vm: &crate::vm::VM,
        address: &crate::vm::instructions::operands::Operand,
        value: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait PopInstruction: IntegratedCircuit {
    /// pop r?
    fn execute_pop(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait PushInstruction: IntegratedCircuit {
    /// push a(r?|num)
    fn execute_push(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait PutInstruction: IntegratedCircuit {
    /// put d? address(r?|num) value(r?|num)
    fn execute_put(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        address: &crate::vm::instructions::operands::Operand,
        value: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait PutdInstruction: IntegratedCircuit {
    /// putd id(r?|num) address(r?|num) value(r?|num)
    fn execute_putd(
        &mut self,
        vm: &crate::vm::VM,
        id: &crate::vm::instructions::operands::Operand,
        address: &crate::vm::instructions::operands::Operand,
        value: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait RandInstruction: IntegratedCircuit {
    /// rand r?
    fn execute_rand(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait RoundInstruction: IntegratedCircuit {
    /// round r? a(r?|num)
    fn execute_round(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SInstruction: IntegratedCircuit {
    /// s d? logicType r?
    fn execute_s(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        logic_type: &crate::vm::instructions::operands::Operand,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SapInstruction: IntegratedCircuit {
    /// sap r? a(r?|num) b(r?|num) c(r?|num)
    fn execute_sap(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SapzInstruction: IntegratedCircuit {
    /// sapz r? a(r?|num) b(r?|num)
    fn execute_sapz(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SbInstruction: IntegratedCircuit {
    /// sb deviceHash logicType r?
    fn execute_sb(
        &mut self,
        vm: &crate::vm::VM,
        device_hash: &crate::vm::instructions::operands::Operand,
        logic_type: &crate::vm::instructions::operands::Operand,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SbnInstruction: IntegratedCircuit {
    /// sbn deviceHash nameHash logicType r?
    fn execute_sbn(
        &mut self,
        vm: &crate::vm::VM,
        device_hash: &crate::vm::instructions::operands::Operand,
        name_hash: &crate::vm::instructions::operands::Operand,
        logic_type: &crate::vm::instructions::operands::Operand,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SbsInstruction: IntegratedCircuit {
    /// sbs deviceHash slotIndex logicSlotType r?
    fn execute_sbs(
        &mut self,
        vm: &crate::vm::VM,
        device_hash: &crate::vm::instructions::operands::Operand,
        slot_index: &crate::vm::instructions::operands::Operand,
        logic_slot_type: &crate::vm::instructions::operands::Operand,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SdInstruction: IntegratedCircuit {
    /// sd id(r?|num) logicType r?
    fn execute_sd(
        &mut self,
        vm: &crate::vm::VM,
        id: &crate::vm::instructions::operands::Operand,
        logic_type: &crate::vm::instructions::operands::Operand,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SdnsInstruction: IntegratedCircuit {
    /// sdns r? d?
    fn execute_sdns(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SdseInstruction: IntegratedCircuit {
    /// sdse r? d?
    fn execute_sdse(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        d: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SelectInstruction: IntegratedCircuit {
    /// select r? a(r?|num) b(r?|num) c(r?|num)
    fn execute_select(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SeqInstruction: IntegratedCircuit {
    /// seq r? a(r?|num) b(r?|num)
    fn execute_seq(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SeqzInstruction: IntegratedCircuit {
    /// seqz r? a(r?|num)
    fn execute_seqz(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SgeInstruction: IntegratedCircuit {
    /// sge r? a(r?|num) b(r?|num)
    fn execute_sge(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SgezInstruction: IntegratedCircuit {
    /// sgez r? a(r?|num)
    fn execute_sgez(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SgtInstruction: IntegratedCircuit {
    /// sgt r? a(r?|num) b(r?|num)
    fn execute_sgt(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SgtzInstruction: IntegratedCircuit {
    /// sgtz r? a(r?|num)
    fn execute_sgtz(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SinInstruction: IntegratedCircuit {
    /// sin r? a(r?|num)
    fn execute_sin(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SlaInstruction: IntegratedCircuit {
    /// sla r? a(r?|num) b(r?|num)
    fn execute_sla(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SleInstruction: IntegratedCircuit {
    /// sle r? a(r?|num) b(r?|num)
    fn execute_sle(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SleepInstruction: IntegratedCircuit {
    /// sleep a(r?|num)
    fn execute_sleep(
        &mut self,
        vm: &crate::vm::VM,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SlezInstruction: IntegratedCircuit {
    /// slez r? a(r?|num)
    fn execute_slez(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SllInstruction: IntegratedCircuit {
    /// sll r? a(r?|num) b(r?|num)
    fn execute_sll(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SltInstruction: IntegratedCircuit {
    /// slt r? a(r?|num) b(r?|num)
    fn execute_slt(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SltzInstruction: IntegratedCircuit {
    /// sltz r? a(r?|num)
    fn execute_sltz(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SnaInstruction: IntegratedCircuit {
    /// sna r? a(r?|num) b(r?|num) c(r?|num)
    fn execute_sna(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
        c: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SnanInstruction: IntegratedCircuit {
    /// snan r? a(r?|num)
    fn execute_snan(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SnanzInstruction: IntegratedCircuit {
    /// snanz r? a(r?|num)
    fn execute_snanz(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SnazInstruction: IntegratedCircuit {
    /// snaz r? a(r?|num) b(r?|num)
    fn execute_snaz(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SneInstruction: IntegratedCircuit {
    /// sne r? a(r?|num) b(r?|num)
    fn execute_sne(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SnezInstruction: IntegratedCircuit {
    /// snez r? a(r?|num)
    fn execute_snez(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SqrtInstruction: IntegratedCircuit {
    /// sqrt r? a(r?|num)
    fn execute_sqrt(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SraInstruction: IntegratedCircuit {
    /// sra r? a(r?|num) b(r?|num)
    fn execute_sra(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SrlInstruction: IntegratedCircuit {
    /// srl r? a(r?|num) b(r?|num)
    fn execute_srl(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SsInstruction: IntegratedCircuit {
    /// ss d? slotIndex logicSlotType r?
    fn execute_ss(
        &mut self,
        vm: &crate::vm::VM,
        d: &crate::vm::instructions::operands::Operand,
        slot_index: &crate::vm::instructions::operands::Operand,
        logic_slot_type: &crate::vm::instructions::operands::Operand,
        r: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait SubInstruction: IntegratedCircuit {
    /// sub r? a(r?|num) b(r?|num)
    fn execute_sub(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait TanInstruction: IntegratedCircuit {
    /// tan r? a(r?|num)
    fn execute_tan(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait TruncInstruction: IntegratedCircuit {
    /// trunc r? a(r?|num)
    fn execute_trunc(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait XorInstruction: IntegratedCircuit {
    /// xor r? a(r?|num) b(r?|num)
    fn execute_xor(
        &mut self,
        vm: &crate::vm::VM,
        r: &crate::vm::instructions::operands::Operand,
        a: &crate::vm::instructions::operands::Operand,
        b: &crate::vm::instructions::operands::Operand,
    ) -> Result<(), crate::errors::ICError>;
}
pub trait YieldInstruction: IntegratedCircuit {
    /// yield
    fn execute_yield(&mut self, vm: &crate::vm::VM) -> Result<(), crate::errors::ICError>;
}
pub trait ICInstructable:
    AbsInstruction
    + AcosInstruction
    + AddInstruction
    + AliasInstruction
    + AndInstruction
    + AsinInstruction
    + AtanInstruction
    + Atan2Instruction
    + BapInstruction
    + BapalInstruction
    + BapzInstruction
    + BapzalInstruction
    + BdnsInstruction
    + BdnsalInstruction
    + BdseInstruction
    + BdsealInstruction
    + BeqInstruction
    + BeqalInstruction
    + BeqzInstruction
    + BeqzalInstruction
    + BgeInstruction
    + BgealInstruction
    + BgezInstruction
    + BgezalInstruction
    + BgtInstruction
    + BgtalInstruction
    + BgtzInstruction
    + BgtzalInstruction
    + BleInstruction
    + BlealInstruction
    + BlezInstruction
    + BlezalInstruction
    + BltInstruction
    + BltalInstruction
    + BltzInstruction
    + BltzalInstruction
    + BnaInstruction
    + BnaalInstruction
    + BnanInstruction
    + BnazInstruction
    + BnazalInstruction
    + BneInstruction
    + BnealInstruction
    + BnezInstruction
    + BnezalInstruction
    + BrapInstruction
    + BrapzInstruction
    + BrdnsInstruction
    + BrdseInstruction
    + BreqInstruction
    + BreqzInstruction
    + BrgeInstruction
    + BrgezInstruction
    + BrgtInstruction
    + BrgtzInstruction
    + BrleInstruction
    + BrlezInstruction
    + BrltInstruction
    + BrltzInstruction
    + BrnaInstruction
    + BrnanInstruction
    + BrnazInstruction
    + BrneInstruction
    + BrnezInstruction
    + CeilInstruction
    + ClrInstruction
    + ClrdInstruction
    + CosInstruction
    + DefineInstruction
    + DivInstruction
    + ExpInstruction
    + FloorInstruction
    + GetInstruction
    + GetdInstruction
    + HcfInstruction
    + JInstruction
    + JalInstruction
    + JrInstruction
    + LInstruction
    + LabelInstruction
    + LbInstruction
    + LbnInstruction
    + LbnsInstruction
    + LbsInstruction
    + LdInstruction
    + LogInstruction
    + LrInstruction
    + LsInstruction
    + MaxInstruction
    + MinInstruction
    + ModInstruction
    + MoveInstruction
    + MulInstruction
    + NorInstruction
    + NotInstruction
    + OrInstruction
    + PeekInstruction
    + PokeInstruction
    + PopInstruction
    + PushInstruction
    + PutInstruction
    + PutdInstruction
    + RandInstruction
    + RoundInstruction
    + SInstruction
    + SapInstruction
    + SapzInstruction
    + SbInstruction
    + SbnInstruction
    + SbsInstruction
    + SdInstruction
    + SdnsInstruction
    + SdseInstruction
    + SelectInstruction
    + SeqInstruction
    + SeqzInstruction
    + SgeInstruction
    + SgezInstruction
    + SgtInstruction
    + SgtzInstruction
    + SinInstruction
    + SlaInstruction
    + SleInstruction
    + SleepInstruction
    + SlezInstruction
    + SllInstruction
    + SltInstruction
    + SltzInstruction
    + SnaInstruction
    + SnanInstruction
    + SnanzInstruction
    + SnazInstruction
    + SneInstruction
    + SnezInstruction
    + SqrtInstruction
    + SraInstruction
    + SrlInstruction
    + SsInstruction
    + SubInstruction
    + TanInstruction
    + TruncInstruction
    + XorInstruction
    + YieldInstruction
{
}
impl<T> ICInstructable for T where
    T: AbsInstruction
        + AcosInstruction
        + AddInstruction
        + AliasInstruction
        + AndInstruction
        + AsinInstruction
        + AtanInstruction
        + Atan2Instruction
        + BapInstruction
        + BapalInstruction
        + BapzInstruction
        + BapzalInstruction
        + BdnsInstruction
        + BdnsalInstruction
        + BdseInstruction
        + BdsealInstruction
        + BeqInstruction
        + BeqalInstruction
        + BeqzInstruction
        + BeqzalInstruction
        + BgeInstruction
        + BgealInstruction
        + BgezInstruction
        + BgezalInstruction
        + BgtInstruction
        + BgtalInstruction
        + BgtzInstruction
        + BgtzalInstruction
        + BleInstruction
        + BlealInstruction
        + BlezInstruction
        + BlezalInstruction
        + BltInstruction
        + BltalInstruction
        + BltzInstruction
        + BltzalInstruction
        + BnaInstruction
        + BnaalInstruction
        + BnanInstruction
        + BnazInstruction
        + BnazalInstruction
        + BneInstruction
        + BnealInstruction
        + BnezInstruction
        + BnezalInstruction
        + BrapInstruction
        + BrapzInstruction
        + BrdnsInstruction
        + BrdseInstruction
        + BreqInstruction
        + BreqzInstruction
        + BrgeInstruction
        + BrgezInstruction
        + BrgtInstruction
        + BrgtzInstruction
        + BrleInstruction
        + BrlezInstruction
        + BrltInstruction
        + BrltzInstruction
        + BrnaInstruction
        + BrnanInstruction
        + BrnazInstruction
        + BrneInstruction
        + BrnezInstruction
        + CeilInstruction
        + ClrInstruction
        + ClrdInstruction
        + CosInstruction
        + DefineInstruction
        + DivInstruction
        + ExpInstruction
        + FloorInstruction
        + GetInstruction
        + GetdInstruction
        + HcfInstruction
        + JInstruction
        + JalInstruction
        + JrInstruction
        + LInstruction
        + LabelInstruction
        + LbInstruction
        + LbnInstruction
        + LbnsInstruction
        + LbsInstruction
        + LdInstruction
        + LogInstruction
        + LrInstruction
        + LsInstruction
        + MaxInstruction
        + MinInstruction
        + ModInstruction
        + MoveInstruction
        + MulInstruction
        + NorInstruction
        + NotInstruction
        + OrInstruction
        + PeekInstruction
        + PokeInstruction
        + PopInstruction
        + PushInstruction
        + PutInstruction
        + PutdInstruction
        + RandInstruction
        + RoundInstruction
        + SInstruction
        + SapInstruction
        + SapzInstruction
        + SbInstruction
        + SbnInstruction
        + SbsInstruction
        + SdInstruction
        + SdnsInstruction
        + SdseInstruction
        + SelectInstruction
        + SeqInstruction
        + SeqzInstruction
        + SgeInstruction
        + SgezInstruction
        + SgtInstruction
        + SgtzInstruction
        + SinInstruction
        + SlaInstruction
        + SleInstruction
        + SleepInstruction
        + SlezInstruction
        + SllInstruction
        + SltInstruction
        + SltzInstruction
        + SnaInstruction
        + SnanInstruction
        + SnanzInstruction
        + SnazInstruction
        + SneInstruction
        + SnezInstruction
        + SqrtInstruction
        + SraInstruction
        + SrlInstruction
        + SsInstruction
        + SubInstruction
        + TanInstruction
        + TruncInstruction
        + XorInstruction
        + YieldInstruction
{
}
